<Project Sdk="Microsoft.NET.Sdk">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), certtest.props))\certtest.props" />

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <CLSCompliant>false</CLSCompliant>
    <IsTestProject>true</IsTestProject>
    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <PropertyGroup>
    <DefineConstants>$(DefineConstants);SVCUTILTESTS</DefineConstants>
    <XmlSerializerTestSource>..\..\System.Private.ServiceModel\tests\Scenarios\Contract\XmlSerializer\</XmlSerializerTestSource>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TargetFramework)' == 'net8.0'">
    <!-- We're building netcoreap, run on the test CLI
         Reuse the same runtimeconfig that the tests use. -->
    <GeneratorRuntimeConfig>$(ArtifactsBinDir)\dotnet-svcutil.xmlserializer\$(Configuration)\$(TargetFramework)\dotnet-svcutil.xmlserializer.runtimeconfig.json</GeneratorRuntimeConfig>
    <GeneratorCliPath>$(DOTNET_INSTALL_DIR)/</GeneratorCliPath>
  </PropertyGroup>

  <ItemGroup Condition=" '$(SkipTestsOnPlatform)' != 'true' ">
    <Compile Include="**\*.cs" />
    <Compile Include="$(XmlSerializerTestSource)**\*.cs" />
  </ItemGroup>

  <ItemGroup Condition=" '$(SkipTestsOnPlatform)' == 'true' ">
    <Compile Include=".\AlwaysPassTest.cs" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="$(GeneratorRuntimeConfig)">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  
  <ItemGroup>
    <ProjectReference Include="$(SvcUtilCoreProj)" />
    <ProjectReference Include="$(WcfServiceModelHttpProj)" />
    <ProjectReference Include='$(WcfScenarioTestCommonProj)' />
  </ItemGroup>

  <!-- This target runs before binplacing as it needs to provide a test assembly to binplace, and depends on CopyFilesToOutputDirectory
       so that the Generator app dll and runtimeconfig will be copied to the OutputPath -->
  <Target Name="GenerateSerializationAssembly" DependsOnTargets="CopyFilesToOutputDirectory" AfterTargets="CopyFilesToOutputDirectory" Condition=" '$(SkipTestsOnPlatform)' != 'true' " >
    <!--The Exec Command below has a dependency on 'Microsoft.VisualStudio.TestPlatform.ObjectModel.dll'.
    Find it and pass it as an arg to the Exec Command-->
    <FindInList
      CaseSensitive='true'
      ItemSpecToFind='Microsoft.VisualStudio.TestPlatform.ObjectModel.dll'
      List='@(ReferencePath)'
      MatchFileNameOnly='true' >
      <Output TaskParameter='ItemFound' PropertyName='depRef'/>
    </FindInList>
    
    <PropertyGroup>
      <ServiceModelPrimitivesOutputPath>$(ArtifactsBinDir)System.ServiceModel.Primitives/$(Configuration)/$(TargetFramework)/</ServiceModelPrimitivesOutputPath>
      <ServiceModelPrimitivesAssemblyName>System.ServiceModel.Primitives.dll</ServiceModelPrimitivesAssemblyName>
      <DotNetExe>$(GeneratorCliPath)dotnet</DotNetExe>
      <DotnetSvcutilXmlSerializerAssembly>$(OutputPath)dotnet-svcutil.xmlserializer.dll</DotnetSvcutilXmlSerializerAssembly>
      <InputTestAssembly>$(OutputPath)ScenarioTests.Common.Tests.dll</InputTestAssembly>
      <OutputGeneratedSource>$(OutputPath)ScenarioTests.Common.Tests.XmlSerializers.cs</OutputGeneratedSource>
      <CscOutputAssembly>$(OutputPath)ScenarioTests.Common.Tests.XmlSerializers.dll</CscOutputAssembly>
      <ServiceModelPrimitivesAssembly>$(ServiceModelPrimitivesOutputPath)$(ServiceModelPrimitivesAssemblyName)</ServiceModelPrimitivesAssembly>
      
    </PropertyGroup>
    <Message Text="Running Serialization Tool" Importance="normal" />
    <Message Text="Run XmlSerializer: $(DotNetExe) $(DotnetSvcutilXmlSerializerAssembly) $(InputTestAssembly) --quiet --out:$(OutputGeneratedSource) --smreference:$(ServiceModelPrimitivesAssembly) --reference=$(depRef)" Importance="high" />
    <Message Text="$(ServiceModelPrimitivesAssemblyName) exists in $(ServiceModelPrimitivesOutputPath)" Condition="Exists('$(ServiceModelPrimitivesOutputPath)$(ServiceModelPrimitivesAssemblyName)') == 'true'" Importance="high" />
    <Error Text="$(ServiceModelPrimitivesAssemblyName) does not exist in $(ServiceModelPrimitivesOutputPath)" Condition="Exists('$(ServiceModelPrimitivesOutputPath)$(ServiceModelPrimitivesAssemblyName)') != 'true'" />
    <Exec Command="$(DotNetExe) $(DotnetSvcutilXmlSerializerAssembly) $(InputTestAssembly) --quiet --out:$(OutputGeneratedSource) --smreference:&quot;$(ServiceModelPrimitivesAssembly)&quot; --reference=$(depRef)" />
    <Warning Condition="Exists('$(OutputGeneratedSource)') != 'true'" Text="Failed to generate $(OutputGeneratedSource)"/>
    <Csc Condition="Exists('$(OutputGeneratedSource)') == 'true'"
         OutputAssembly="$(CscOutputAssembly)"
         References="@(ReferencePath);@(IntermediateAssembly)"
         EmitDebugInformation="$(DebugSymbols)"
         DebugType="$(DebugType)"
         Sources="$(OutputGeneratedSource)"
         TargetType="Library"
         DisabledWarnings="$(NoWarn), 219"
         UseSharedCompilation="true" />
    <Warning Condition="Exists('$(CscOutputAssembly)') != 'true'" Text="Failed to generate $(CscOutputAssembly)"/>

    <ItemGroup>
      <!-- Include the Serializer in ReferenceCopyLocalPaths so that it will be binplaced -->
      <ReferenceCopyLocalPaths Include="$(CscOutputAssembly)" />
    </ItemGroup>
  </Target>

</Project>
