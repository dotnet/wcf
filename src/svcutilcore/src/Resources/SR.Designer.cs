//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace System {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    partial class SR {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SR() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Tools.ServiceModel.SvcUtil.XmlSerializer.Resources.SR", typeof(SR).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The intended output for the tool could not be inferred from the inputs and the options..
        /// </summary>
        internal static string AmbiguousToolUseage {
            get {
                return ResourceManager.GetString("AmbiguousToolUseage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copyright (c) Microsoft Corporation.  All rights reserved.......
        /// </summary>
        internal static string CopyrightForCmdLine {
            get {
                return ResourceManager.GetString("CopyrightForCmdLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not load assembly &apos;{0}&apos;. 2  reference assemblies (&apos;{1}&apos; and &apos;{2}&apos;) were found that match the string &apos;{0}&apos;. This is usually caused by an insufficient type reference in a config file. Resolve this issue by passing only the reference assembly needed or by adding more information like a version number or a public key to the reference..
        /// </summary>
        internal static string ErrAmbiguityInAssemblyNames {
            get {
                return ResourceManager.GetString("ErrAmbiguityInAssemblyNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The /{0} option conflicts with other options. Review your use of the tool...
        /// </summary>
        internal static string ErrAmbiguousOptionModeConflict {
            get {
                return ResourceManager.GetString("ErrAmbiguousOptionModeConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load file {0} as an Assembly. Check the FusionLogs for more Information..
        /// </summary>
        internal static string ErrAssemblyLoadFailed {
            get {
                return ResourceManager.GetString("ErrAssemblyLoadFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create directory: {0}.
        /// </summary>
        internal static string ErrCannotCreateDirectory {
            get {
                return ResourceManager.GetString("ErrCannotCreateDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create output file: {0}.
        /// </summary>
        internal static string ErrCannotCreateFile {
            get {
                return ResourceManager.GetString("ErrCannotCreateFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is an existing config file that cannot be overwritten. Either fix the problem or provide a different config file name using the /{0} option..
        /// </summary>
        internal static string ErrCannotDeleteExistingConfig {
            get {
                return ResourceManager.GetString("ErrCannotDeleteExistingConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one type with the same name exists in the set of referenced assemblies. Use assembly-qualified names to disambiguate between the /{0} types &apos;{1}&apos; and &apos;{2}&apos;.
        /// </summary>
        internal static string ErrCannotDisambiguateSpecifiedTypes {
            get {
                return ResourceManager.GetString("ErrCannotDisambiguateSpecifiedTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No type could be loaded for the value {1} passed to the /{0} option. Ensure that the assembly this type belongs to is specified via the /{2} option..
        /// </summary>
        internal static string ErrCannotLoadSpecifiedType {
            get {
                return ResourceManager.GetString("ErrCannotLoadSpecifiedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value passed to the /{0} option. Target namespace &apos;{1}&apos; cannot be mapped to multiple CLR namespaces &apos;{2}&apos; and &apos;{3}&apos;.
        /// </summary>
        internal static string ErrCannotSpecifyMultipleMappingsForNamespace {
            get {
                return ResourceManager.GetString("ErrCannotSpecifyMultipleMappingsForNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot write to output file.
        /// </summary>
        internal static string ErrCannotWriteFile {
            get {
                return ResourceManager.GetString("ErrCannotWriteFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; input argument conflicts with &apos;{1}&apos; because they imply different modes of tool operation.
        /// </summary>
        internal static string ErrConflictingInputs {
            get {
                return ResourceManager.GetString("ErrConflictingInputs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A code provider could not be created for the value: &apos;{0}&apos; passed to the /{1} argument. Verify that the code provider is properly installed and configured..
        /// </summary>
        internal static string ErrCouldNotCreateCodeProvider {
            get {
                return ResourceManager.GetString("ErrCouldNotCreateCodeProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not create instance of the type &apos;{0}&apos; passed to the /{1} argument..
        /// </summary>
        internal static string ErrCouldNotCreateInstance {
            get {
                return ResourceManager.GetString("ErrCouldNotCreateInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load reference assembly &apos;{0}&apos;.
        /// </summary>
        internal static string ErrCouldNotLoadReferenceAssemblyAt {
            get {
                return ResourceManager.GetString("ErrCouldNotLoadReferenceAssemblyAt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load any types in assembly &apos;{0}&apos;..
        /// </summary>
        internal static string ErrCouldNotLoadTypesFromAssemblyAt {
            get {
                return ResourceManager.GetString("ErrCouldNotLoadTypesFromAssemblyAt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value &apos;{1}&apos; passed to the /{0} option. The {2} character is not permitted in a path.
        /// </summary>
        internal static string ErrDirectoryContainsInvalidCharacters {
            get {
                return ResourceManager.GetString("ErrDirectoryContainsInvalidCharacters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input path &apos;{0}&apos; appears to be a directory. Inputs must be either URLs or file paths.
        /// </summary>
        internal static string ErrDirectoryInsteadOfFile {
            get {
                return ResourceManager.GetString("ErrDirectoryInsteadOfFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The directory &apos;{0}&apos; could not be found. Verify that the directory exists and that you have the appropriate permissions to read it..
        /// </summary>
        internal static string ErrDirectoryNotFound {
            get {
                return ResourceManager.GetString("ErrDirectoryNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value &apos;{1}&apos; passed to the /{0} option. &apos;{1}&apos; is a path to a file..
        /// </summary>
        internal static string ErrDirectoryPointsToAFile {
            get {
                return ResourceManager.GetString("ErrDirectoryPointsToAFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly {1} was loaded twice through the /{0} option. You may reference each assembly only once..
        /// </summary>
        internal static string ErrDuplicateReferenceValues {
            get {
                return ResourceManager.GetString("ErrDuplicateReferenceValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value {1} was passed to the /{0} option multiple times. Each type may be specified only once..
        /// </summary>
        internal static string ErrDuplicateValuePassedToTypeArg {
            get {
                return ResourceManager.GetString("ErrDuplicateValuePassedToTypeArg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The /{0} option cannot be used when the /{1} option has been specified..
        /// </summary>
        internal static string ErrExclusiveOptionsSpecified {
            get {
                return ResourceManager.GetString("ErrExclusiveOptionsSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} option requires that a value be specified..
        /// </summary>
        internal static string ErrExpectedValue {
            get {
                return ResourceManager.GetString("ErrExpectedValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input read from &apos;{0}&apos; is inconsistent with other options..
        /// </summary>
        internal static string ErrInputConflictsWithMode {
            get {
                return ResourceManager.GetString("ErrInputConflictsWithMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input read from &apos;{1}&apos; cannot be used with the /{0} option because they imply different modes of tool operation..
        /// </summary>
        internal static string ErrInputConflictsWithOption {
            get {
                return ResourceManager.GetString("ErrInputConflictsWithOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of input read from &apos;{2}&apos; is not supported with the /{0} option set to &apos;{1}&apos;..
        /// </summary>
        internal static string ErrInputConflictsWithTarget {
            get {
                return ResourceManager.GetString("ErrInputConflictsWithTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The file at: &apos;{0}&apos; read via input argument&apos;{1}&apos; does not appear to be an XML metadata file or a valid assembly..
        /// </summary>
        internal static string ErrInputFileNotAssemblyOrMetadata {
            get {
                return ResourceManager.GetString("ErrInputFileNotAssemblyOrMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input path &apos;{0}&apos; doesn&apos;t appear to refer to any existing files and does not appear to be a valid URI..
        /// </summary>
        internal static string ErrInvalidInputPath {
            get {
                return ResourceManager.GetString("ErrInvalidInputPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  Invalid value {1} passed to the /{0} option. Specify a comma-separated target namespace and CLR namespace pair..
        /// </summary>
        internal static string ErrInvalidNamespaceArgument {
            get {
                return ResourceManager.GetString("ErrInvalidNamespaceArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid path {0}. Check the /{1} argument.
        /// </summary>
        internal static string ErrInvalidPath {
            get {
                return ResourceManager.GetString("ErrInvalidPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid serializer value passed to the /{0} option. The supported serializers are: {2}.
        /// </summary>
        internal static string ErrInvalidSerializer {
            get {
                return ResourceManager.GetString("ErrInvalidSerializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid target &apos;{1}&apos; specified via the /{0} option. The supported Targets are: {2}.
        /// </summary>
        internal static string ErrInvalidTarget {
            get {
                return ResourceManager.GetString("ErrInvalidTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid targetClientVersion value passed to the /{0} option. The supported targetClientVersions are: {2}.
        /// </summary>
        internal static string ErrInvalidTargetClientVersion {
            get {
                return ResourceManager.GetString("ErrInvalidTargetClientVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not load &apos;{0}&apos; as an assembly verify that this file is a .NET Assembly..
        /// </summary>
        internal static string ErrIsNotAnAssembly {
            get {
                return ResourceManager.GetString("ErrIsNotAnAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot merge config file. The file &apos;{1}&apos; does not exist..
        /// </summary>
        internal static string ErrMergeConfigUsedWhenConfigDoesNotExist {
            get {
                return ResourceManager.GetString("ErrMergeConfigUsedWhenConfigDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use the /{0} option without specifying the /{1} option..
        /// </summary>
        internal static string ErrMergeConfigUsedWithoutConfig {
            get {
                return ResourceManager.GetString("ErrMergeConfigUsedWithoutConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input path &apos;{0}&apos; doesn&apos;t appear to refer to any existing files.
        /// </summary>
        internal static string ErrNoFilesFound {
            get {
                return ResourceManager.GetString("ErrNoFilesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; passed to the /{1} argument is not a subclass of {2}..
        /// </summary>
        internal static string ErrNotCodeDomType {
            get {
                return ResourceManager.GetString("ErrNotCodeDomType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{0}&apos; passed to the /{1} argument does not represent a defined language and it could not be loaded as a fully qualified CLR type..
        /// </summary>
        internal static string ErrNotLanguageOrCodeDomType {
            get {
                return ResourceManager.GetString("ErrNotLanguageOrCodeDomType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No valid input files specified. Specify either metadata documents or assembly files.
        /// </summary>
        internal static string ErrNoValidInputFilesSpecified {
            get {
                return ResourceManager.GetString("ErrNoValidInputFilesSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  The use of the /{2} option is not supported with the /{0} option set to &apos;{1}&apos;..
        /// </summary>
        internal static string ErrOptionConflictsWithTarget {
            get {
                return ResourceManager.GetString("ErrOptionConflictsWithTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The /{1} option cannot be used with the /{0} option because they imply different output types..
        /// </summary>
        internal static string ErrOptionModeConflict {
            get {
                return ResourceManager.GetString("ErrOptionModeConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error: .
        /// </summary>
        internal static string Error {
            get {
                return ResourceManager.GetString("Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resultant path &apos;{0}&apos; is too long. Review the /{1} and /{2} arguments.
        /// </summary>
        internal static string ErrPathTooLong {
            get {
                return ResourceManager.GetString("ErrPathTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resultant path &apos;{0}&apos; is too long. Review the /{1} argument.
        /// </summary>
        internal static string ErrPathTooLongDirOnly {
            get {
                return ResourceManager.GetString("ErrPathTooLongDirOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a validation error on a schema generated during export:\r\n    Source: {0}\r\n    Line: {1} Column: {2}\r\n   Validation Error: {3}.
        /// </summary>
        internal static string ErrSchemaValidationForExport {
            get {
                return ResourceManager.GetString("ErrSchemaValidationForExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} option cannot be specified multiple times..
        /// </summary>
        internal static string ErrSingleUseSwitch {
            get {
                return ResourceManager.GetString("ErrSingleUseSwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid argument: &apos;{0}&apos;..
        /// </summary>
        internal static string ErrSwitchMissing {
            get {
                return ResourceManager.GetString("ErrSwitchMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The config File {0} specified for the /{1} option does not exist..
        /// </summary>
        internal static string ErrToolConfigDoesNotExist {
            get {
                return ResourceManager.GetString("ErrToolConfigDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error loading import extensions. Make sure to provide the assemblies containing these extensions as reference assemblies using the /{0} option..
        /// </summary>
        internal static string ErrUnableToLoadExtensions {
            get {
                return ResourceManager.GetString("ErrUnableToLoadExtensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot read {0}..
        /// </summary>
        internal static string ErrUnableToLoadFile {
            get {
                return ResourceManager.GetString("ErrUnableToLoadFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot load the config file {0}.
        /// </summary>
        internal static string ErrUnableToLoadInputConfig {
            get {
                return ResourceManager.GetString("ErrUnableToLoadInputConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error loading a referenced contract type. This type will be ignored.\r\n    Type: {0}.
        /// </summary>
        internal static string ErrUnableToLoadReferenceType {
            get {
                return ResourceManager.GetString("ErrUnableToLoadReferenceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create output filename. Too many files are being created with the prefix &apos;{0}&apos;..
        /// </summary>
        internal static string ErrUnableToUniquifyFilename {
            get {
                return ResourceManager.GetString("ErrUnableToUniquifyFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid argument: delimiter (&apos;:&apos; or &apos;=&apos;) cannot start option..
        /// </summary>
        internal static string ErrUnexpectedDelimiter {
            get {
                return ResourceManager.GetString("ErrUnexpectedDelimiter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred in the tool..
        /// </summary>
        internal static string ErrUnexpectedError {
            get {
                return ResourceManager.GetString("ErrUnexpectedError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} option does not support any values.
        /// </summary>
        internal static string ErrUnexpectedValue {
            get {
                return ResourceManager.GetString("ErrUnexpectedValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized option &apos;{0}&apos; specified..
        /// </summary>
        internal static string ErrUnknownSwitch {
            get {
                return ResourceManager.GetString("ErrUnknownSwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} option cannot be used with the {1} option..
        /// </summary>
        internal static string ErrValidateInvalidUse {
            get {
                return ResourceManager.GetString("ErrValidateInvalidUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To validate a service, the /{0} option must be used to specify the service to validate..
        /// </summary>
        internal static string ErrValidateRequiresServiceName {
            get {
                return ResourceManager.GetString("ErrValidateRequiresServiceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Svcutil does not work with the framework of the version being used. &apos;System.Xml.Serialization.XmlSerializer&apos; does not have a method named &apos;GenerateSerializer&apos;..
        /// </summary>
        internal static string GenerateSerializerNotFound {
            get {
                return ResourceManager.GetString("GenerateSerializerNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating files....
        /// </summary>
        internal static string GeneratingFiles {
            get {
                return ResourceManager.GetString("GeneratingFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generating XML serializers....
        /// </summary>
        internal static string GeneratingSerializer {
            get {
                return ResourceManager.GetString("GeneratingSerializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -= CODE GENERATION =-.
        /// </summary>
        internal static string HelpCodeGenerationCategory {
            get {
                return ResourceManager.GetString("HelpCodeGenerationCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description: {0} can generate code for service contracts, clients and data types from metadata documents. These metadata documents can be on disk or retrieved online. Online retrieval follows either the WS-Metadata Exchange protocol or the DISCO protocol..
        /// </summary>
        internal static string HelpCodeGenerationDescription {
            get {
                return ResourceManager.GetString("HelpCodeGenerationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate code for Service Contracts. Client class and configuration will not be generated. (Short Form: /{0}).
        /// </summary>
        internal static string HelpCodeGenerationServiceContract {
            get {
                return ResourceManager.GetString("HelpCodeGenerationServiceContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax: {0} [/{1}:{2}]  {3}* | {4}* | {5}.
        /// </summary>
        internal static string HelpCodeGenerationSyntax {
            get {
                return ResourceManager.GetString("HelpCodeGenerationSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to a metadata document (wsdl or xsd). Standard command-line wildcards can be used in the file path..
        /// </summary>
        internal static string HelpCodeGenerationSyntaxInput1 {
            get {
                return ResourceManager.GetString("HelpCodeGenerationSyntaxInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL to a service endpoint that provides metadata or to a metadata document hosted online. For more information on how these documents are retrieved see the Metadata Download section..
        /// </summary>
        internal static string HelpCodeGenerationSyntaxInput2 {
            get {
                return ResourceManager.GetString("HelpCodeGenerationSyntaxInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to an XML file that contains a WS-Addressing EndpointReference for a service endpoint that supports WS-Metadata Exchange. For more information see the Metadata Download section..
        /// </summary>
        internal static string HelpCodeGenerationSyntaxInput3 {
            get {
                return ResourceManager.GetString("HelpCodeGenerationSyntaxInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A fully-qualified or assembly-qualified name of the type to use as a collection data type when code is generated from schemas. (Short Form: /{0}).
        /// </summary>
        internal static string HelpCollectionType {
            get {
                return ResourceManager.GetString("HelpCollectionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -= COMMON OPTIONS =-.
        /// </summary>
        internal static string HelpCommonOptionsCategory {
            get {
                return ResourceManager.GetString("HelpCommonOptionsCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Directory to create files in (default: current directory) (Short Form: /{0}).
        /// </summary>
        internal static string HelpDirectory {
            get {
                return ResourceManager.GetString("HelpDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -= EXAMPLES =-.
        /// </summary>
        internal static string HelpExamples {
            get {
                return ResourceManager.GetString("HelpExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to svcutil myContractLibrary.exe.
        /// </summary>
        internal static string HelpExamples1 {
            get {
                return ResourceManager.GetString("HelpExamples1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to - Generate serialization types for XmlSerializer types used by any Service Contracts in the assembly.
        /// </summary>
        internal static string HelpExamples2 {
            get {
                return ResourceManager.GetString("HelpExamples2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A fully-qualified or assembly-qualified type name to exclude from referenced contract types. (Short Form: /{0}).
        /// </summary>
        internal static string HelpExcludeTypeCodeGeneration {
            get {
                return ResourceManager.GetString("HelpExcludeTypeCodeGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fully-qualified or assembly-qualified name of a type to exclude from export. This option can be used when exporting metadata for a service or a set of service contracts to exclude types from being exported. This option cannot be used with the /{1} option. (Short Form: /{0}).
        /// </summary>
        internal static string HelpExcludeTypeExport {
            get {
                return ResourceManager.GetString("HelpExcludeTypeExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Display command syntax and options for the tool. (Short Form: /{0}).
        /// </summary>
        internal static string HelpHelp {
            get {
                return ResourceManager.GetString("HelpHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;assemblyPath&gt;.
        /// </summary>
        internal static string HelpInputAssemblyPath {
            get {
                return ResourceManager.GetString("HelpInputAssemblyPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;epr&gt;.
        /// </summary>
        internal static string HelpInputEpr {
            get {
                return ResourceManager.GetString("HelpInputEpr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;metadataDocumentPath&gt;.
        /// </summary>
        internal static string HelpInputMetadataDocumentPath {
            get {
                return ResourceManager.GetString("HelpInputMetadataDocumentPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;url&gt;.
        /// </summary>
        internal static string HelpInputUrl {
            get {
                return ResourceManager.GetString("HelpInputUrl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -= METADATA DOWNLOAD =-.
        /// </summary>
        internal static string HelpMetadataDownloadCategory {
            get {
                return ResourceManager.GetString("HelpMetadataDownloadCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description: {0} can be used to download metadata from running services and save the metadata to local files. To download metadata, you must explicitly specify the /{1}:{2} option. Otherwise, client code will be generated. For http and https URL schemes svcutil.exe will try to retrieve metadata using WS-Metadata Exchange and DISCO. For all other URL schemes {0} will only try WS-Metadata Exchange. By default, {0} uses the bindings defined in the System.ServiceModel.Description.MetadataExchangeBindings class. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string HelpMetadataDownloadDescription {
            get {
                return ResourceManager.GetString("HelpMetadataDownloadDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax: {0} /{1}:{2}  {3}* | {4}.
        /// </summary>
        internal static string HelpMetadataDownloadSyntax {
            get {
                return ResourceManager.GetString("HelpMetadataDownloadSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The URL to a service endpoint that provides metadata or an URL that points to a metadata document hosted online. .
        /// </summary>
        internal static string HelpMetadataDownloadSyntaxInput1 {
            get {
                return ResourceManager.GetString("HelpMetadataDownloadSyntaxInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to an XML file that contains a WS-Addressing EndpointReference for a service endpoint that supports WS-Metadata Exchange..
        /// </summary>
        internal static string HelpMetadataDownloadSyntaxInput2 {
            get {
                return ResourceManager.GetString("HelpMetadataDownloadSyntaxInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -= METADATA EXPORT =-.
        /// </summary>
        internal static string HelpMetadataExportCategory {
            get {
                return ResourceManager.GetString("HelpMetadataExportCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description: {0} can export metadata for services, contracts and data types in compiled assemblies. To export metadata for a service, you must use the /{1} option to indicate the service you would like to export. To export all Data Contract types within an assembly use the /{2} option. By default metadata is exported for all Service Contracts in the input assemblies..
        /// </summary>
        internal static string HelpMetadataExportDescription {
            get {
                return ResourceManager.GetString("HelpMetadataExportDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax: {0} [/{1}:{2}] [/{3}:{4}] [/{5}] {6}*.
        /// </summary>
        internal static string HelpMetadataExportSyntax {
            get {
                return ResourceManager.GetString("HelpMetadataExportSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to an assembly that contains services, contracts or Data Contract types to be exported. Standard command-line wildcards can be used to provide multiple files as input..
        /// </summary>
        internal static string HelpMetadataExportSyntaxInput1 {
            get {
                return ResourceManager.GetString("HelpMetadataExportSyntaxInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A mapping from a WSDL or XML Schema targetNamespace to a CLR namespace. Using the &apos;*&apos; for the targetNamespace maps all targetNamespaces without an explicit mapping to that CLR namespace. Default: derived from the target namespace of the schema document for Data Contracts. The default namespace is used for all other generated types. (Short Form: /{0}).
        /// </summary>
        internal static string HelpNamespace {
            get {
                return ResourceManager.GetString("HelpNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suppress the copyright and banner message..
        /// </summary>
        internal static string HelpNologo {
            get {
                return ResourceManager.GetString("HelpNologo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not reference standard libraries. By default mscorlib.dll and system.servicemodel.dll are referenced..
        /// </summary>
        internal static string HelpNostdlib {
            get {
                return ResourceManager.GetString("HelpNostdlib", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options:.
        /// </summary>
        internal static string HelpOptions {
            get {
                return ResourceManager.GetString("HelpOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  The filename for the generated code. Default: derived from the WSDL definition name, WSDL service name or targetNamespace of one of the schemas. (Short Form: /{0}).
        /// </summary>
        internal static string HelpOut {
            get {
                return ResourceManager.GetString("HelpOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference types in the specified assembly. When generating clients, use this option to specify assemblies that might contain types representing the metadata being imported.  (Short Form: /{0}).
        /// </summary>
        internal static string HelpReferenceCodeGeneration {
            get {
                return ResourceManager.GetString("HelpReferenceCodeGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the specified assembly to the set of assemblies used for resolving type references. If you are exporting or validating a service that uses 3rd-party extensions (Behaviors, Bindings and BindingElements) registered in config use this option to locate extension assemblies that are not in the GAC.  (Short Form: /{0}).
        /// </summary>
        internal static string HelpReferenceOther {
            get {
                return ResourceManager.GetString("HelpReferenceOther", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target output for the tool: {0}, {1} or {2}..
        /// </summary>
        internal static string HelpTargetOutputType {
            get {
                return ResourceManager.GetString("HelpTargetOutputType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USES:.
        /// </summary>
        internal static string HelpUsage1 {
            get {
                return ResourceManager.GetString("HelpUsage1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   - Generate code from running services or static metadata documents. .
        /// </summary>
        internal static string HelpUsage2 {
            get {
                return ResourceManager.GetString("HelpUsage2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   - Export metadata documents from compiled code..
        /// </summary>
        internal static string HelpUsage3 {
            get {
                return ResourceManager.GetString("HelpUsage3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   - Validate compiled service code..
        /// </summary>
        internal static string HelpUsage4 {
            get {
                return ResourceManager.GetString("HelpUsage4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   - Download metadata documents from running services..
        /// </summary>
        internal static string HelpUsage5 {
            get {
                return ResourceManager.GetString("HelpUsage5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to   - Pre-generate serialization code..
        /// </summary>
        internal static string HelpUsage6 {
            get {
                return ResourceManager.GetString("HelpUsage6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -= SERVICE VALIDATION =-.
        /// </summary>
        internal static string HelpValidationCategory {
            get {
                return ResourceManager.GetString("HelpValidationCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description: Validation is useful to detect errors in service implementations without hosting the service. You must use the /{0} option to indicate the service you would like to validate..
        /// </summary>
        internal static string HelpValidationDescription {
            get {
                return ResourceManager.GetString("HelpValidationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fully-qualified or assembly-qualified name of a service type to exclude from validation. (Short Form: /{0}).
        /// </summary>
        internal static string HelpValidationExcludeTypeExport {
            get {
                return ResourceManager.GetString("HelpValidationExcludeTypeExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax: {0} /{1} /{2}:{3}  {4}*.
        /// </summary>
        internal static string HelpValidationSyntax {
            get {
                return ResourceManager.GetString("HelpValidationSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to an assembly containing service types to be validated. The assembly must have an associated config file to provide service configuration. Standard command-line wildcards can be used to provide multiple assemblies..
        /// </summary>
        internal static string HelpValidationSyntaxInput1 {
            get {
                return ResourceManager.GetString("HelpValidationSyntaxInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate code that references functionality in .NET Framework assemblies 3.0 and before. Use this switch if you are generating code for clients that use .NET Framework version 3.0.(Short Form: /{0}).
        /// </summary>
        internal static string HelpVersion30TargetClientVersion {
            get {
                return ResourceManager.GetString("HelpVersion30TargetClientVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generate code that references functionality in .NET Framework assemblies 3.5 and before. Use this switch if you are generating code for clients that use .NET Framework version 3.5.(Short Form: /{0}).
        /// </summary>
        internal static string HelpVersion35TargetClientVersion {
            get {
                return ResourceManager.GetString("HelpVersion35TargetClientVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generated code will not unwrap &quot;parameters&quot; member of document-wrapped-literal messages..
        /// </summary>
        internal static string HelpWrapped {
            get {
                return ResourceManager.GetString("HelpWrapped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -= XMLSERIALIZER TYPE GENERATION =-.
        /// </summary>
        internal static string HelpXmlSerializerTypeGenerationCategory {
            get {
                return ResourceManager.GetString("HelpXmlSerializerTypeGenerationCategory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Description: {0} can pre-generate C# serialization code that is required for types that can be serialized using the XmlSerializer. {0} will only generate code for types used by Service Contracts found in the input assemblies..
        /// </summary>
        internal static string HelpXmlSerializerTypeGenerationDescription {
            get {
                return ResourceManager.GetString("HelpXmlSerializerTypeGenerationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax: {0} {1}*.
        /// </summary>
        internal static string HelpXmlSerializerTypeGenerationSyntax {
            get {
                return ResourceManager.GetString("HelpXmlSerializerTypeGenerationSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path to an assembly containing Service Contract types. Serialization types will be generated for all Xml Serializable types in each contract.
        /// </summary>
        internal static string HelpXmlSerializerTypeGenerationSyntaxInput1 {
            get {
                return ResourceManager.GetString("HelpXmlSerializerTypeGenerationSyntaxInput1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add the specified assembly to the set of assemblies used for resolving type references. (Short Form: /{0}).
        /// </summary>
        internal static string HelpXmlSerializerTypeGenerationSyntaxInput2 {
            get {
                return ResourceManager.GetString("HelpXmlSerializerTypeGenerationSyntaxInput2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fully-qualified or assembly-qualified type name to exclude from export or validation. This option can be used when exporting metadata for a service or a set of service contracts to exclude types from being exported. (Short Form: /{0}).
        /// </summary>
        internal static string HelpXmlSerializerTypeGenerationSyntaxInput3 {
            get {
                return ResourceManager.GetString("HelpXmlSerializerTypeGenerationSyntaxInput3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filename for the generated code. This option will be ignored when multiple assemblies are passed as input to the tool. Default: derived from the assembly name. (Short Form: /{0}).
        /// </summary>
        internal static string HelpXmlSerializerTypeGenerationSyntaxInput4 {
            get {
                return ResourceManager.GetString("HelpXmlSerializerTypeGenerationSyntaxInput4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you are using the /{0} option to import data contract types and are getting this error message, consider using xsd.exe instead. Types generated by xsd.exe may be used in the Windows Communication Foundation after applying the XmlSerializerFormatAttribute attribute on your service contract. Alternatively, consider using the /{1} option to import these types as XML types to use with DataContractFormatAttribute attribute on your service contract..
        /// </summary>
        internal static string HintConsiderUseXmlSerializer {
            get {
                return ResourceManager.GetString("HintConsiderUseXmlSerializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft (R) Service Model Metadata Tool\r\n[{0}, Version {1}]\r\n{2}\r\n.
        /// </summary>
        internal static string Logo {
            get {
                return ResourceManager.GetString("Logo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If you would like more help, type &quot;svcutil /{0}&quot;.
        /// </summary>
        internal static string MoreHelp {
            get {
                return ResourceManager.GetString("MoreHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No code was generated.\r\nIf you were trying to generate a client, this could be because the metadata documents did not contain any valid contracts or services\r\nor because all contracts/services were discovered to exist in /reference assemblies. Verify that you passed all the metadata documents to the tool..
        /// </summary>
        internal static string NoCodeWasGenerated {
            get {
                return ResourceManager.GetString("NoCodeWasGenerated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;type&gt;.
        /// </summary>
        internal static string ParametersCollectionType {
            get {
                return ResourceManager.GetString("ParametersCollectionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;directory&gt;.
        /// </summary>
        internal static string ParametersDirectory {
            get {
                return ResourceManager.GetString("ParametersDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;type&gt;.
        /// </summary>
        internal static string ParametersExcludeType {
            get {
                return ResourceManager.GetString("ParametersExcludeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;language&gt;.
        /// </summary>
        internal static string ParametersLanguage {
            get {
                return ResourceManager.GetString("ParametersLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;string,string&gt;.
        /// </summary>
        internal static string ParametersNamespace {
            get {
                return ResourceManager.GetString("ParametersNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;file&gt;.
        /// </summary>
        internal static string ParametersOut {
            get {
                return ResourceManager.GetString("ParametersOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;output type&gt;.
        /// </summary>
        internal static string ParametersOutputType {
            get {
                return ResourceManager.GetString("ParametersOutputType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;file path&gt;.
        /// </summary>
        internal static string ParametersReference {
            get {
                return ResourceManager.GetString("ParametersReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;enum&gt;.
        /// </summary>
        internal static string ParametersTarget {
            get {
                return ResourceManager.GetString("ParametersTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Validation Error:.
        /// </summary>
        internal static string ValidationError {
            get {
                return ResourceManager.GetString("ValidationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Service &apos;{0}&apos; was validated with no errors.
        /// </summary>
        internal static string ValidationWasSuccessful {
            get {
                return ResourceManager.GetString("ValidationWasSuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning: .
        /// </summary>
        internal static string Warning {
            get {
                return ResourceManager.GetString("Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft (R) Windows (R) Communication Foundation.
        /// </summary>
        internal static string WcfTrademarkForCmdLine {
            get {
                return ResourceManager.GetString("WcfTrademarkForCmdLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were errors loading types in an assembly loaded from &apos;{0}&apos; some types in the assembly could not be loaded and will not be available to the tool..
        /// </summary>
        internal static string WrnCouldNotLoadTypesFromReferenceAssemblyAt {
            get {
                return ResourceManager.GetString("WrnCouldNotLoadTypesFromReferenceAssemblyAt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot generate XmlSerializer types for assembly: {0}. No service contract types were found..
        /// </summary>
        internal static string WrnNoServiceContractTypes {
            get {
                return ResourceManager.GetString("WrnNoServiceContractTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot generate XmlSerializer for assembly: {0}. No service contract in the assembly has an operation with XmlSerializerOperationBehavior..
        /// </summary>
        internal static string WrnNoXmlSerializerOperationBehavior {
            get {
                return ResourceManager.GetString("WrnNoXmlSerializerOperationBehavior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Option /{0} cannot be used with multiple input assemblies. Ignoring {0} option. .
        /// </summary>
        internal static string WrnOptionConflictsWithInput {
            get {
                return ResourceManager.GetString("WrnOptionConflictsWithInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error loading a contract type. Cannot generate XmlSerializer types for this contract.\r\n    Type: {0}\r\n    Details:{1}.
        /// </summary>
        internal static string WrnUnableToLoadContractForSGen {
            get {
                return ResourceManager.GetString("WrnUnableToLoadContractForSGen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to When using the &apos;/{0}:{1}&apos; argument, only one namespace mapping is supported. Use &apos;/{2}:*,&lt;string&gt;&apos; to set the namespace..
        /// </summary>
        internal static string WrnVJSharpNamespace {
            get {
                return ResourceManager.GetString("WrnVJSharpNamespace", resourceCulture);
            }
        }
    }
}
