//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     GenAPI Version: 10.0.10.47602
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace System.ServiceModel.Channels
{
    public abstract partial class ConnectionOrientedTransportBindingElement : System.ServiceModel.Channels.TransportBindingElement
    {
        public ConnectionOrientedTransportBindingElement() { }
        public ConnectionOrientedTransportBindingElement(System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement elementToBeCloned) { }
        [System.ComponentModel.DefaultValueAttribute(8192)]
        public int ConnectionBufferSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(65536)]
        public int MaxBufferSize { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(System.ServiceModel.TransferMode.Buffered)]
        public System.ServiceModel.TransferMode TransferMode { get { throw null; } set { } }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    public partial interface IConnection
    {
        int ConnectionBufferSize { get; }
        void Abort();
        System.Threading.Tasks.ValueTask CloseAsync(System.TimeSpan timeout);
        System.Threading.Tasks.ValueTask<int> ReadAsync(System.Memory<byte> buffer, System.TimeSpan timeout);
        System.Threading.Tasks.ValueTask WriteAsync(System.ReadOnlyMemory<byte> buffer, bool immediate, System.TimeSpan timeout);
    }
    public partial interface IConnectionInitiator
    {
        System.Threading.Tasks.ValueTask<System.ServiceModel.Channels.IConnection> ConnectAsync(System.Uri uri, System.TimeSpan timeout);
    }
    public partial interface IConnectionPoolSettings
    {
        T GetConnectionPoolSetting<T>(string settingName);
        bool IsCompatible(System.ServiceModel.Channels.IConnectionPoolSettings other);
    }
    public abstract partial class NetFramingTransportChannelFactory<TChannel> : System.ServiceModel.Channels.ChannelFactoryBase<TChannel>, System.ServiceModel.IDefaultCommunicationTimeouts
    {
        public NetFramingTransportChannelFactory(System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement bindingElement, System.ServiceModel.Channels.BindingContext context, string connectionPoolGroupName, System.TimeSpan idleTimeout, int maxOutboundConnectionsPerEndpoint) { }
        public int ConnectionBufferSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public string ConnectionPoolGroupName { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.TimeSpan IdleTimeout { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int MaxBufferSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public int MaxOutboundConnectionsPerEndpoint { get { throw null; } }
        public System.TimeSpan MaxOutputDelay { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public abstract string Scheme { get; }
        public System.ServiceModel.TransferMode TransferMode { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } }
        public System.ServiceModel.Channels.StreamUpgradeProvider Upgrade { get { throw null; } }
        public abstract System.ServiceModel.Channels.IConnectionInitiator GetConnectionInitiator();
        protected abstract string GetConnectionPoolKey(System.ServiceModel.EndpointAddress address, System.Uri via);
        public override T GetProperty<T>() { throw null; }
        protected override void OnAbort() { }
        protected override System.IAsyncResult OnBeginClose(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override System.IAsyncResult OnBeginOpen(System.TimeSpan timeout, System.AsyncCallback callback, object state) { throw null; }
        protected override void OnClose(System.TimeSpan timeout) { }
        protected override TChannel OnCreateChannel(System.ServiceModel.EndpointAddress address, System.Uri via) { throw null; }
        protected override void OnEndClose(System.IAsyncResult result) { }
        protected override void OnEndOpen(System.IAsyncResult result) { }
        protected override void OnOpen(System.TimeSpan timeout) { }
        protected override void OnOpening() { }
        protected virtual bool SupportsUpgrade(System.ServiceModel.Channels.StreamUpgradeBindingElement upgradeBindingElement) { throw null; }
    }
    public partial class SslStreamSecurityBindingElement : System.ServiceModel.Channels.StreamUpgradeBindingElement
    {
        public SslStreamSecurityBindingElement() { }
        protected SslStreamSecurityBindingElement(System.ServiceModel.Channels.SslStreamSecurityBindingElement elementToBeCloned) { }
        public System.ServiceModel.Security.IdentityVerifier IdentityVerifier { get { throw null; } set { } }
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool RequireClientCertificate { [System.Runtime.CompilerServices.CompilerGeneratedAttribute] get { throw null; } [System.Runtime.CompilerServices.CompilerGeneratedAttribute] set { } }
        [System.ComponentModel.DefaultValueAttribute(System.Security.Authentication.SslProtocols.Tls | System.Security.Authentication.SslProtocols.Tls11 | System.Security.Authentication.SslProtocols.Tls12)]
        public System.Security.Authentication.SslProtocols SslProtocols { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.StreamUpgradeProvider BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
    public abstract partial class StreamSecurityUpgradeInitiator : System.ServiceModel.Channels.StreamUpgradeInitiator
    {
        protected StreamSecurityUpgradeInitiator() { }
        public abstract System.ServiceModel.Security.SecurityMessageProperty GetRemoteSecurity();
    }
    public abstract partial class StreamSecurityUpgradeProvider : System.ServiceModel.Channels.StreamUpgradeProvider
    {
        protected StreamSecurityUpgradeProvider() { }
        protected StreamSecurityUpgradeProvider(System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
    }
    public abstract partial class StreamUpgradeBindingElement : System.ServiceModel.Channels.BindingElement
    {
        protected StreamUpgradeBindingElement() { }
        protected StreamUpgradeBindingElement(System.ServiceModel.Channels.StreamUpgradeBindingElement elementToBeCloned) { }
        public abstract System.ServiceModel.Channels.StreamUpgradeProvider BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext context);
    }
    public abstract partial class StreamUpgradeInitiator
    {
        protected StreamUpgradeInitiator() { }
        public abstract string GetNextUpgrade();
        public abstract System.Threading.Tasks.Task<System.IO.Stream> InitiateUpgradeAsync(System.IO.Stream stream);
    }
    public abstract partial class StreamUpgradeProvider : System.ServiceModel.Channels.CommunicationObject
    {
        protected StreamUpgradeProvider() { }
        protected StreamUpgradeProvider(System.ServiceModel.IDefaultCommunicationTimeouts timeouts) { }
        protected override System.TimeSpan DefaultCloseTimeout { get { throw null; } }
        protected override System.TimeSpan DefaultOpenTimeout { get { throw null; } }
        public abstract System.ServiceModel.Channels.StreamUpgradeInitiator CreateUpgradeInitiator(System.ServiceModel.EndpointAddress remoteAddress, System.Uri via);
        public virtual T GetProperty<T>() where T : class { throw null; }
    }
    public partial class WindowsStreamSecurityBindingElement : System.ServiceModel.Channels.StreamUpgradeBindingElement
    {
        public WindowsStreamSecurityBindingElement() { }
        protected WindowsStreamSecurityBindingElement(System.ServiceModel.Channels.WindowsStreamSecurityBindingElement elementToBeCloned) { }
        [System.ComponentModel.DefaultValueAttribute(System.Net.Security.ProtectionLevel.EncryptAndSign)]
        public System.Net.Security.ProtectionLevel ProtectionLevel { get { throw null; } set { } }
        public override System.ServiceModel.Channels.IChannelFactory<TChannel> BuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.StreamUpgradeProvider BuildClientStreamUpgradeProvider(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override bool CanBuildChannelFactory<TChannel>(System.ServiceModel.Channels.BindingContext context) { throw null; }
        public override System.ServiceModel.Channels.BindingElement Clone() { throw null; }
        public override T GetProperty<T>(System.ServiceModel.Channels.BindingContext context) { throw null; }
    }
}
