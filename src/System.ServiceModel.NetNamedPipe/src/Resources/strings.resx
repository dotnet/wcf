<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="SFxTimeoutOutOfRange0" xml:space="preserve">
    <value>Timeout must be greater than or equal to TimeSpan.Zero. To disable timeout, specify TimeSpan.MaxValue.</value>
  </data>
  <data name="SFxTimeoutOutOfRangeTooBig" xml:space="preserve">
    <value>Timeouts larger than Int32.MaxValue TotalMilliseconds (approximately 24 days) cannot be honored. To disable timeout, specify TimeSpan.MaxValue.</value>
  </data>
  <data name="ValueMustBeNonNegative" xml:space="preserve">
    <value>The value of this argument must be non-negative.</value>
  </data>
  <data name="ChannelTypeNotSupported" xml:space="preserve">
    <value>The specified channel type {0} is not supported by this channel manager.</value>
  </data>
  <data name="PipeNameCanNotBeAccessed" xml:space="preserve">
    <value>The pipe name could not be obtained for the pipe URI: {0}</value>
  </data>
  <data name="PipeNameCanNotBeAccessed2" xml:space="preserve">
    <value>The pipe name could not be obtained for {0}.</value>
  </data>
  <data name="PipeKnownWin32Error" xml:space="preserve">
    <value>{0} ({1}, 0x{2})</value>
  </data>
  <data name="EndpointNotFound" xml:space="preserve">
    <value>There was no endpoint listening at {0} that could accept the message. This is often caused by an incorrect address or SOAP action. See InnerException, if present, for more details.</value>
  </data>
  <data name="PipeEndpointNotFound" xml:space="preserve">
    <value>The pipe endpoint '{0}' could not be found on your local machine.</value>
  </data>
  <data name="PipeUriSchemeWrong" xml:space="preserve">
    <value>URIs used with pipes must use the scheme: 'net.pipe'.</value>
  </data>
  <data name="TraceCodeInitiatingNamedPipeConnection" xml:space="preserve">
    <value>Initiating Named Pipe connection.</value>
  </data>
  <data name="PipeModeChangeFailed" xml:space="preserve">
    <value>The pipe was not able to be set to message mode: {0}</value>
  </data>
  <data name="PipeConnectFailed" xml:space="preserve">
    <value>Cannot connect to endpoint '{0}'.</value>
  </data>
  <data name="PipeConnectAddressFailed" xml:space="preserve">
    <value>A pipe endpoint exists for '{0}', but the connect failed: {1}</value>
  </data>
  <data name="PipeConnectTimedOutServerTooBusy" xml:space="preserve">
    <value>Cannot connect to endpoint '{0}' within the allotted timeout of {1}. The server has likely reached the MaxConnections quota and is too busy to accept new connections. The time allotted to this operation may have been a portion of a longer timeout.</value>
  </data>
  <data name="PipeConnectTimedOut" xml:space="preserve">
    <value>Cannot connect to endpoint '{0}' within the allotted timeout of {1}. The time allotted to this operation may have been a portion of a longer timeout.</value>
  </data>
  <data name="PipeConnectionAbortedReadTimedOut" xml:space="preserve">
    <value>The pipe connection was aborted because an asynchronous read from the pipe did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout.</value>
  </data>
  <data name="PipeConnectionAbortedWriteTimedOut" xml:space="preserve">
    <value>The pipe connection was aborted because an asynchronous write to the pipe did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout.</value>
  </data>
  <data name="PipeCantCloseWithPendingWrite" xml:space="preserve">
    <value>The pipe cannot be closed while a write to the pipe is pending.</value>
  </data>
  <data name="PipeWriteTimedOut" xml:space="preserve">
    <value>The write to the pipe did not complete within the allotted timeout of {0}. The time allotted to this operation may have been a portion of a longer timeout.</value>
  </data>
  <data name="PipeShutdownWriteError" xml:space="preserve">
    <value>The shutdown indicator could not be written to the pipe.  The application on the other end of the pipe may not be listening for it.  The pipe will still be closed.</value>
  </data>
  <data name="PipeSignalExpected" xml:space="preserve">
    <value>The read from the pipe expected just a signal, but received actual data.</value>
  </data>
  <data name="PipeShutdownReadError" xml:space="preserve">
    <value>The shutdown indicator was not received from the pipe.  The application on the other end of the pipe may not have sent it.  The pipe will still be closed.</value>
  </data>
  <data name="PipeClosed" xml:space="preserve">
    <value>The operation cannot be completed because the pipe was closed.  This may have been caused by the application on the other end of the pipe exiting.</value>
  </data>
  <data name="PipeCloseFailed" xml:space="preserve">
    <value>The pipe could not close gracefully.  This may be caused by the application on the other end of the pipe exiting.</value>
  </data>
  <data name="TraceCodePipeConnectionAbort" xml:space="preserve">
    <value>PipeConnection aborted</value>
  </data>
  <data name="PipeAlreadyClosing" xml:space="preserve">
    <value>The pipe cannot be written to or read from because it is already in the process of being closed.</value>
  </data>
  <data name="PipeReadPending" xml:space="preserve">
    <value>There is already a read in progress for the pipe.  Wait for the first operation to complete before attempting to read again.</value>
  </data>
  <data name="PipeWritePending" xml:space="preserve">
    <value>There is already a write in progress for the pipe.  Wait for the first operation to complete before attempting to write again.</value>
  </data>
  <data name="PipeAlreadyShuttingDown" xml:space="preserve">
    <value>The pipe cannot be written to because it is already in the process of shutting down.</value>
  </data>
  <data name="TraceCodeFailedPipeConnect" xml:space="preserve">
    <value>An attempt to connect to the named pipe endpoint at '{1}' failed. Another attempt will be made with {0} remaining in the overall timeout.</value>
  </data>
  <data name="PlatformNotSupported_NetNamedPipe" xml:space="preserve">
    <value>NetNamedPipe is not supported on this platform.</value>
  </data>
</root>