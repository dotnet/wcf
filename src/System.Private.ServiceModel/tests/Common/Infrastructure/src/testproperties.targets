<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
    $(_TestPropertyCode):
      Contains the code that will be created at build time
      and added to the @(Compile) collection to be compiled.  It exists so that
      any of these special MSBuild properties or environment variables are captured
      at build time into the test binaries.  This allows those binaries to execute
      on other machines and use the variable properties specified at build time.
      If any items are added to testproperties.props, please update this file as well 
      to generate a property name and dictionary entry for it.
  -->
  <PropertyGroup>
    <_TestPropertyCode>
      <![CDATA[
using System.Collections.Generic%3B
namespace Infrastructure.Common
{
    public static partial class TestProperties
    {
        public static readonly string BridgeResourceFolder_PropertyName = "BridgeResourceFolder"%3B
        public static readonly string BridgeHost_PropertyName = "BridgeHost"%3B
        public static readonly string BridgePort_PropertyName = "BridgePort"%3B
        public static readonly string BridgeHttpPort_PropertyName = "BridgeHttpPort"%3B
        public static readonly string BridgeHttpsPort_PropertyName = "BridgeHttpsPort"%3B
        public static readonly string BridgeTcpPort_PropertyName = "BridgeTcpPort"%3B
        public static readonly string BridgeWebSocketPort_PropertyName = "BridgeWebSocketPort"%3B
        public static readonly string BridgeSecureWebSocketPort_PropertyName = "BridgeSecureWebSocketPort"%3B
        public static readonly string BridgeRemoteEnabled_PropertyName = "BridgeRemoteEnabled"%3B
        public static readonly string BridgeCertificatePassword_PropertyName = "BridgeCertificatePassword"%3B
        public static readonly string BridgeCertificateValidityPeriod_PropertyName = "BridgeCertificateValidityPeriod"%3B
        public static readonly string UseFiddlerUrl_PropertyName = "UseFiddlerUrl"%3B
        public static readonly string BridgeMaxIdleTimeSpan_PropertyName = "BridgeMaxIdleTimeSpan"%3B
        public static readonly string MaxTestTimeSpan_PropertyName = "MaxTestTimeSpan"%3B
        public static readonly string NegotiateTestRealm_PropertyName = "NegotiateTestRealm"%3B
        public static readonly string NegotiateTestDomain_PropertyName = "NegotiateTestDomain"%3B
        public static readonly string NegotiateTestUserName_PropertyName = "NegotiateTestUserName"%3B
        public static readonly string NegotiateTestPassword_PropertyName = "NegotiateTestPassword"%3B
        public static readonly string NegotiateTestSpn_PropertyName = "NegotiateTestSpn"%3B
        public static readonly string NegotiateTestUpn_PropertyName = "NegotiateTestUpn"%3B
        public static readonly string Domain_Joined_PropertyName = "Domain_Joined"%3B
        public static readonly string Root_Certificate_Installed_PropertyName = "Root_Certificate_Installed"%3B
        public static readonly string Client_Certificate_Installed_PropertyName = "Client_Certificate_Installed"%3B
        public static readonly string SPN_Available_PropertyName = "SPN_Available"%3B
        public static readonly string Kerberos_Available_PropertyName = "Kerberos_Available"%3B
        public static readonly string ServiceUri_PropertyName = "ServiceUri"%3B
                
        static partial void Initialize(Dictionary<string, string> properties)
        {
            properties["BridgeResourceFolder"] = @"$(BridgeResourceFolder)"%3B
            properties["BridgeHost"] = "$(BridgeHost)"%3B
            properties["BridgePort"] = "$(BridgePort)"%3B
            properties["BridgeHttpPort"] = "$(BridgeHttpPort)"%3B
            properties["BridgeHttpsPort"] = "$(BridgeHttpsPort)"%3B
            properties["BridgeTcpPort"] = "$(BridgeTcpPort)"%3B
            properties["BridgeWebSocketPort"] = "$(BridgeWebSocketPort)"%3B
            properties["BridgeSecureWebSocketPort"] = "$(BridgeSecureWebSocketPort)"%3B
            properties["BridgeRemoteEnabled"] = "$(BridgeRemoteEnabled)"%3B
            properties["BridgeCertificatePassword"] = "$(BridgeCertificatePassword)"%3B
            properties["BridgeCertificateValidityPeriod"] = "$(BridgeCertificateValidityPeriod)"%3B
            properties["UseFiddlerUrl"] = "$(UseFiddlerUrl)"%3B
            properties["BridgeMaxIdleTimeSpan"] = "$(BridgeMaxIdleTimeSpan)"%3B
            properties["MaxTestTimeSpan"] = "$(MaxTestTimeSpan)"%3B
            properties["NegotiateTestRealm"] = "$(NegotiateTestRealm)"%3B
            properties["NegotiateTestDomain"] = "$(NegotiateTestDomain)"%3B
            properties["NegotiateTestUserName"] = "$(NegotiateTestUserName)"%3B
            properties["NegotiateTestPassword"] = "$(NegotiateTestPassword)"%3B
            properties["NegotiateTestSpn"] = "$(NegotiateTestSpn)"%3B
            properties["NegotiateTestUpn"] = "$(NegotiateTestUpn)"%3B
            properties["Domain_Joined"] = "$(Domain_Joined)"%3B
            properties["Root_Certificate_Installed"] = "$(Root_Certificate_Installed)"%3B
            properties["Client_Certificate_Installed"] = "$(Client_Certificate_Installed)"%3B
            properties["SPN_Available"] = "$(SPN_Available)"%3B
            properties["Kerberos_Available"] = "$(Kerberos_Available)"%3B
            properties["ServiceUri"] = "$(ServiceUri)"%3B
        }
    }
}
                ]]>
    </_TestPropertyCode>
  </PropertyGroup>

  <!-- 
    SanitizeTestProperties:
      This target ensures the test property values are sanitized for proper
      evaluation at runtime.
  -->
  <Target Name="SanitizeTestProperties">
    <!-- BridgeResourceFolder needs to convert forward slashes to backward
         slashes to be usable on Windows, where the Bridge runs.
    -->
    <PropertyGroup Condition="$(BridgeResourceFolder.Contains('/'))">
      <BridgeResourceFolder>$(BridgeResourceFolder.Replace('/', '\'))</BridgeResourceFolder>
    </PropertyGroup>
  </Target>
  
  <!-- 
    CreateTestPropertiesFile:
      This target writes the test properties to the file specified by
      $(GeneratedTestPropertiesFileName) if it does not already exist.
  -->
  <Target Name="CreateTestPropertiesFile" Condition="!Exists('$(GeneratedTestPropertiesFileName)')">
    <WriteLinesToFile
        File="$(GeneratedTestPropertiesFileName)"
        Lines="$(_TestPropertyCode)"
        Overwrite="true"/>
  </Target>

  <!--
    CreateTestProperties:
      This target generates a file to initialize the TestProperties dictionary
      with a set of known name/value pairs.  The file will also contain
      generated static strings for each property name.  Code accessing the
      properties in TestProperties.Properties should use these generated
      names rather than separate string literals.
  -->
  <Target Name="CreateTestProperties" DependsOnTargets="SanitizeTestProperties;CreateTestPropertiesFile">
    
    <Message Text="CreateTestProperties is using the generated test property file at $(GeneratedTestPropertiesFileName)" />
    
    <!-- Add the generated file to the @(Compile) collection so it gets built. -->
    <ItemGroup>
      <Compile Include="$(GeneratedTestPropertiesFileName)" />
    </ItemGroup>
  </Target>

</Project>


