<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <AssemblyVersion>$(WcfAssemblyVersion)</AssemblyVersion>
    <StrongNameKeyId>Microsoft</StrongNameKeyId>
    <AssemblyName>System.Private.ServiceModel</AssemblyName>
    <RootNamespace>System.ServiceModel</RootNamespace>
    <!-- https://docs.microsoft.com/en-us/nuget/reference/target-frameworks -->
    <TargetFramework>netstandard2.0</TargetFramework>
    <OutputType>Library</OutputType>
    <!-- Workaround for https://github.com/NuGet/NuGet.Client/pull/3016 -->
    <NoWarn>$(NoWarn);NU5131</NoWarn>
    <NoWarn>$(NoWarn);1634;1691;649</NoWarn>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <FileAlignment>512</FileAlignment>
    <DebugSymbols>true</DebugSymbols>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <CLSCompliant>true</CLSCompliant>
    <IsImplementationAssembly>true</IsImplementationAssembly>
    <IsPackable>true</IsPackable>
    <IsShipping>$(Ship_WcfPackages)</IsShipping>
  </PropertyGroup>

  <!-- [todo:arcade] Added this because our released S.P.SM package includes the "_BlockReflectionAttribute" but it is included not only in the UAP* assembly but also the other shipped assembly, should this only be in the binary built for uap? -->
  <!--
      Defining __BlockReflectionAttribute indicates that the .NET Native toolchain should remove the metadata for all non-public APIs.
      This reduces size and disables private reflection on those APIs.
      The attribute can also be applied to individual public APIs to similarly block them.
   -->
  <PropertyGroup>
    <BlockReflectionAttribute>true</BlockReflectionAttribute>
    <!--
    <BlockReflectionAttribute Condition="'$(BlockReflectionAttribute)' == '' and '$(UWPCompatible)' == 'true' and '$(IsTestProject)' != 'true'">true</BlockReflectionAttribute>
    <BlockReflectionAttribute Condition="'$(MSBuildProjectExtension)' != '.csproj'">false</BlockReflectionAttribute>
    -->
    <!-- For debug builds we include the full value string so that we get actual resources, even in the case the toolchain strips the resources file -->
    <GenerateResxSourceIncludeDefaultValues Condition="'$(ConfigurationGroup)' == 'Debug'">true</GenerateResxSourceIncludeDefaultValues>
  </PropertyGroup>

  <ItemGroup Condition="'$(BlockReflectionAttribute)'=='true'">
    <Compile Include="..\..\..\eng\BlockReflectionAttribute.cs" />
  </ItemGroup>

  <PropertyGroup Condition="$(TargetFramework.StartsWith('uap'))">
    <DefineConstants>$(DefineConstants);FEATURE_NETNATIVE</DefineConstants>
  </PropertyGroup>
  
  <PropertyGroup Condition="$(TargetFramework.StartsWith('netstandard'))">
    <DefineConstants>$(DefineConstants);FEATURE_CORECLR</DefineConstants>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="System.Reflection.DispatchProxy"
                      Version="$(SystemReflectionDispatchProxyPackageVersion)" />
    <PackageReference Include="System.Security.Principal.Windows"
                      Version="$(SystemSecurityPrincipalWindowsPackageVersion)" />
  <PackageReference Include="System.Security.Cryptography.Xml"
                      Version="$(SystemSecurityCryptographyXmlPackageVersion)" />
  </ItemGroup>

  <ItemGroup Condition="$(TargetFramework.StartsWith('uap'))">
    <!-- [todo:arcade] This package contains Windows.winmd, this is the easiest way to get it. -->
    <PackageReference Include="Microsoft.TargetingPack.Private.WinRT"
                      Version="1.0.3" />
    <!--[todo:arcade] The Arcade SDK assumes resources being embedded are '.resx' files and generates sources and changes the name.-->
    <!--Override this behavior by setting 'GenerateSource' and 'ManifestResourceName'.-->
    <EmbeddedResource Include="$(MsBuildThisFileDirectory)Resources\$(AssemblyName).rd.xml" >
        <GenerateSource>False</GenerateSource>
        <ManifestResourceName>$(AssemblyName).rd.xml</ManifestResourceName>
    </EmbeddedResource>
  </ItemGroup>

  <!--The default source produced by the Arcade SDK does not work with the checked-in source file SR.cs (class/namespace/filename)-->
  <ItemGroup>
    <EmbeddedResource Update="Resources\Strings.resx">
      <GenerateSource>true</GenerateSource>
      <ManifestResourceName>FxResources.$(AssemblyName).SR</ManifestResourceName>
      <GenerateResourcesCodeAsConstants>false</GenerateResourcesCodeAsConstants>
      <ClassName>System.SR</ClassName>
    </EmbeddedResource>
  </ItemGroup>

  <ItemGroup>
    <Compile Include="..\..\Common\src\System\NotImplemented.cs">
      <Link>Common\System\NotImplemented.cs</Link>
    </Compile>
    <Compile Include="..\..\Common\src\System\__HResults.cs">
      <Link>Common\System\__HResults.cs</Link>
    </Compile>
    <Compile Include="..\..\Common\src\System\SR.cs">
      <Link>Common\System\SR.cs</Link>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <None Include="$(RepositoryEngineeringDir)\_._" Pack="true" PackagePath="ref/$(TargetFramework)" />
  </ItemGroup>

</Project>
