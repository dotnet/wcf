//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Duplex_NS
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "99.99.99")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Duplex_NS.IWcfDuplexService", CallbackContract=typeof(Duplex_NS.IWcfDuplexServiceCallback))]
    public interface IWcfDuplexService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDuplexService/Ping", ReplyAction="http://tempuri.org/IWcfDuplexService/PingResponse")]
        System.Threading.Tasks.Task PingAsync(System.Guid guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "99.99.99")]
    public interface IWcfDuplexServiceCallback
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfDuplexService/OnPingCallback", ReplyAction="http://tempuri.org/IWcfDuplexService/OnPingCallbackResponse")]
        void OnPingCallback(System.Guid guid);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "99.99.99")]
    public interface IWcfDuplexServiceChannel : Duplex_NS.IWcfDuplexService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "99.99.99")]
    public partial class WcfDuplexServiceClientBase : System.ServiceModel.DuplexClientBase<Duplex_NS.IWcfDuplexService>, Duplex_NS.IWcfDuplexService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WcfDuplexServiceClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, WcfDuplexServiceClientBase.GetDefaultBinding(), WcfDuplexServiceClientBase.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.tcp_nosecurity_callback_IWcfDuplexService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfDuplexServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, WcfDuplexServiceClientBase.GetBindingForEndpoint(endpointConfiguration), WcfDuplexServiceClientBase.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfDuplexServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, WcfDuplexServiceClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfDuplexServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, WcfDuplexServiceClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WcfDuplexServiceClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task PingAsync(System.Guid guid)
        {
            return base.Channel.PingAsync(guid);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.tcp_nosecurity_callback_IWcfDuplexService))
            {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.tcp_nosecurity_callback_IWcfDuplexService))
            {
                return new System.ServiceModel.EndpointAddress("net.tcp://wcfcoresrv53/WcfTestService1/Duplex.svc/tcp-nosecurity-callback");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return WcfDuplexServiceClientBase.GetBindingForEndpoint(EndpointConfiguration.tcp_nosecurity_callback_IWcfDuplexService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return WcfDuplexServiceClientBase.GetEndpointAddress(EndpointConfiguration.tcp_nosecurity_callback_IWcfDuplexService);
        }
        
        public enum EndpointConfiguration
        {
            
            tcp_nosecurity_callback_IWcfDuplexService,
        }
    }
    
    public class OnPingCallbackReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {
        
        private object[] results;
        
        public OnPingCallbackReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState)
        {
            this.results = results;
        }
        
        public System.Guid guid
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    public partial class WcfDuplexServiceClient : WcfDuplexServiceClientBase
    {
        
        public WcfDuplexServiceClient(EndpointConfiguration endpointConfiguration) : 
                this(new WcfDuplexServiceClientCallback(), endpointConfiguration)
        {
        }
        
        private WcfDuplexServiceClient(WcfDuplexServiceClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration)
        {
            callbackImpl.Initialize(this);
        }
        
        public WcfDuplexServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new WcfDuplexServiceClientCallback(), binding, remoteAddress)
        {
        }
        
        private WcfDuplexServiceClient(WcfDuplexServiceClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress)
        {
            callbackImpl.Initialize(this);
        }
        
        public WcfDuplexServiceClient() : 
                this(new WcfDuplexServiceClientCallback())
        {
        }
        
        private WcfDuplexServiceClient(WcfDuplexServiceClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl))
        {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<OnPingCallbackReceivedEventArgs> OnPingCallbackReceived;
        
        private void OnOnPingCallbackReceived(object state)
        {
            if ((this.OnPingCallbackReceived != null))
            {
                object[] results = ((object[])(state));
                this.OnPingCallbackReceived(this, new OnPingCallbackReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class WcfDuplexServiceClientCallback : object, IWcfDuplexServiceCallback
        {
            
            private WcfDuplexServiceClient proxy;
            
            public void Initialize(WcfDuplexServiceClient proxy)
            {
                this.proxy = proxy;
            }
            
            public void OnPingCallback(System.Guid guid)
            {
                this.proxy.OnOnPingCallbackReceived(new object[] {
                            guid});
            }
        }
    }
}