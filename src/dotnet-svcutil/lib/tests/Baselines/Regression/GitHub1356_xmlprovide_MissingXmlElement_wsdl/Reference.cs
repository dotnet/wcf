//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GitHub1356_xmlprovide_MissingXmlElement_wsdl_NS
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "99.99.99")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://ws.goldbondinc.com/", ConfigurationName="GitHub1356_xmlprovide_MissingXmlElement_wsdl_NS.Ixmlprovider")]
    public interface Ixmlprovider
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.goldbondinc.com/Ixmlprovider/GetItem", ReplyAction="http://ws.goldbondinc.com/Ixmlprovider/GetItemResponse")]
        System.Threading.Tasks.Task<System.Xml.XmlElement> GetItemAsync(string userid, string pwd, string itemNo, string specNotes, string featureNotes, string imprintNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://ws.goldbondinc.com/Ixmlprovider/GetItemTable", ReplyAction="http://ws.goldbondinc.com/Ixmlprovider/GetItemTableResponse")]
        System.Threading.Tasks.Task<System.Xml.XmlElement> GetItemTableAsync(string userid, string pwd, string startDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "99.99.99")]
    public interface IxmlproviderChannel : GitHub1356_xmlprovide_MissingXmlElement_wsdl_NS.Ixmlprovider, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "99.99.99")]
    public partial class IxmlproviderClient : System.ServiceModel.ClientBase<GitHub1356_xmlprovide_MissingXmlElement_wsdl_NS.Ixmlprovider>, GitHub1356_xmlprovide_MissingXmlElement_wsdl_NS.Ixmlprovider
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public IxmlproviderClient() : 
                base(IxmlproviderClient.GetDefaultBinding(), IxmlproviderClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.WSHttpBinding_Ixmlprovider.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IxmlproviderClient(EndpointConfiguration endpointConfiguration) : 
                base(IxmlproviderClient.GetBindingForEndpoint(endpointConfiguration), IxmlproviderClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IxmlproviderClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(IxmlproviderClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IxmlproviderClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(IxmlproviderClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public IxmlproviderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> GetItemAsync(string userid, string pwd, string itemNo, string specNotes, string featureNotes, string imprintNotes)
        {
            return base.Channel.GetItemAsync(userid, pwd, itemNo, specNotes, featureNotes, imprintNotes);
        }
        
        public System.Threading.Tasks.Task<System.Xml.XmlElement> GetItemTableAsync(string userid, string pwd, string startDate)
        {
            return base.Channel.GetItemTableAsync(userid, pwd, startDate);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_Ixmlprovider))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.WSHttpBinding_Ixmlprovider))
            {
                return new System.ServiceModel.EndpointAddress("https://ws.goldbondinc.com/xmlprovider.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return IxmlproviderClient.GetBindingForEndpoint(EndpointConfiguration.WSHttpBinding_Ixmlprovider);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return IxmlproviderClient.GetEndpointAddress(EndpointConfiguration.WSHttpBinding_Ixmlprovider);
        }
        
        public enum EndpointConfiguration
        {
            
            WSHttpBinding_Ixmlprovider,
        }
    }
}