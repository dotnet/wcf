//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.Diagnostics;
using System.ServiceModel;

namespace System.Runtime
{
    internal class TraceCore
    {
        static System.Resources.ResourceManager resourceManager;
        static System.Globalization.CultureInfo resourceCulture;
        private const int MaxExceptionStringLength = 28 * 1024;


        static object syncLock = new object();
        
        // Double-checked locking pattern requires volatile for read/write synchronization
        
        private TraceCore()
        {
        }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification="This is an auto-generated code, some ETW/TraceSource mixed code would use it.")]
        static System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if (object.ReferenceEquals(resourceManager, null))
                {
                    resourceManager = new System.Resources.ResourceManager("System.Runtime.TraceCore", typeof(TraceCore).Assembly());
                }
                return resourceManager;
            }
        }
        
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Justification="This template is shared across all assemblies, some of which use this accessor.")]
        internal static System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }

        /// Check if trace definition is enabled
        /// Event description ID=57394, Level=informational, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool HandledExceptionIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.HandledExceptionIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Handling an exception.  Exception details: {0}
        /// Event description ID=57394, Level=informational, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Handling an exception.  Exception details: {0}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void HandledException(EtwDiagnosticTrace trace, string param0, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.HandledException(param0, serializedException);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57405, Level=error, Channel=Operational
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool HandledExceptionErrorIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.HandledExceptionErrorIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Handling an exception. Exception details: {0}
        /// Event description ID=57405, Level=error, Channel=Operational
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Handling an exception. Exception details: {0}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void HandledExceptionError(EtwDiagnosticTrace trace, string param0, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.HandledExceptionError(param0, serializedException);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57406, Level=verbose, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool HandledExceptionVerboseIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.HandledExceptionVerboseIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Handling an exception  Exception details: {0}
        /// Event description ID=57406, Level=verbose, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Handling an exception  Exception details: {0}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void HandledExceptionVerbose(EtwDiagnosticTrace trace, string param0, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.HandledExceptionVerbose(param0, serializedException);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57404, Level=warning, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool HandledExceptionWarningIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.HandledExceptionWarningIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Handling an exception. Exception details: {0}
        /// Event description ID=57404, Level=warning, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Handling an exception. Exception details: {0}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void HandledExceptionWarning(EtwDiagnosticTrace trace, string param0, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.HandledExceptionWarning(param0, serializedException);
        }

        /// <summary>
        /// Gets trace definition like: An unexpected failure occurred. Applications should not attempt to handle this error. For diagnostic purposes, this English message is associated with the failure: {0}.
        /// Event description ID=57395, Level=error, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: An unexpected failure occurred. Applications should not attempt to handle this error. For diagnostic purposes, this English message is associated with the failure: {0}.</param>
        internal static void ShipAssertExceptionMessage(EtwDiagnosticTrace trace, string param0)
        {
            WcfEventSource.Instance.ShipAssertExceptionMessage(param0);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57396, Level=warning, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool ThrowingExceptionIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.ThrowingExceptionIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Throwing an exception. Source: {0}. Exception details: {1}
        /// Event description ID=57396, Level=warning, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Throwing an exception. Source: {0}. Exception details: {1}</param>
        /// <param name="param1">Parameter 1 for event: Throwing an exception. Source: {0}. Exception details: {1}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void ThrowingException(EtwDiagnosticTrace trace, string param0, string param1, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.ThrowingException(param0, param1, serializedException);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57397, Level=critical, Channel=Operational
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool UnhandledExceptionIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.UnhandledExceptionIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Unhandled exception.  Exception details: {0}
        /// Event description ID=57397, Level=critical, Channel=Operational
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Unhandled exception.  Exception details: {0}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void UnhandledException(EtwDiagnosticTrace trace, string param0, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.UnhandledException(param0, serializedException);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57399, Level=critical, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool TraceCodeEventLogCriticalIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.TraceCodeEventLogCriticalIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Wrote to the EventLog.
        /// Event description ID=57399, Level=critical, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="traceRecord">Extended data (TraceRecord) for the event</param>
        internal static void TraceCodeEventLogCritical(EtwDiagnosticTrace trace, TraceRecord traceRecord)
        {
            WcfEventSource.Instance.TraceCodeEventLogCritical(traceRecord.EventId);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57400, Level=error, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool TraceCodeEventLogErrorIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.TraceCodeEventLogErrorIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Wrote to the EventLog.
        /// Event description ID=57400, Level=error, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="traceRecord">Extended data (TraceRecord) for the event</param>
        internal static void TraceCodeEventLogError(EtwDiagnosticTrace trace, TraceRecord traceRecord)
        {
            WcfEventSource.Instance.TraceCodeEventLogError(traceRecord.EventId);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57401, Level=informational, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool TraceCodeEventLogInfoIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.TraceCodeEventLogInfoIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Wrote to the EventLog.
        /// Event description ID=57401, Level=informational, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="traceRecord">Extended data (TraceRecord) for the event</param>
        internal static void TraceCodeEventLogInfo(EtwDiagnosticTrace trace, TraceRecord traceRecord)
        {
            WcfEventSource.Instance.TraceCodeEventLogInfo(traceRecord.EventId);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57402, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool TraceCodeEventLogVerboseIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.TraceCodeEventLogVerboseIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Wrote to the EventLog.
        /// Event description ID=57402, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="traceRecord">Extended data (TraceRecord) for the event</param>
        internal static void TraceCodeEventLogVerbose(EtwDiagnosticTrace trace, TraceRecord traceRecord)
        {
            WcfEventSource.Instance.TraceCodeEventLogVerbose(traceRecord.EventId);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57403, Level=warning, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool TraceCodeEventLogWarningIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.TraceCodeEventLogWarningIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Wrote to the EventLog.
        /// Event description ID=57403, Level=warning, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="traceRecord">Extended data (TraceRecord) for the event</param>
        internal static void TraceCodeEventLogWarning(EtwDiagnosticTrace trace, TraceRecord traceRecord)
        {
            WcfEventSource.Instance.TraceCodeEventLogWarning(traceRecord.EventId);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=131, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool BufferPoolAllocationIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.BufferPoolAllocationIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Pool allocating {0} Bytes.
        /// Event description ID=131, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="Size">Parameter 0 for event: Pool allocating {0} Bytes.</param>
        internal static void BufferPoolAllocation(EtwDiagnosticTrace trace, int Size)
        {
            WcfEventSource.Instance.BufferPoolAllocation(Size);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=132, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool BufferPoolChangeQuotaIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.BufferPoolChangeQuotaIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: BufferPool of size {0}, changing quota by {1}.
        /// Event description ID=132, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="PoolSize">Parameter 0 for event: BufferPool of size {0}, changing quota by {1}.</param>
        /// <param name="Delta">Parameter 1 for event: BufferPool of size {0}, changing quota by {1}.</param>
        internal static void BufferPoolChangeQuota(EtwDiagnosticTrace trace, int PoolSize, int Delta)
        {
            WcfEventSource.Instance.BufferPoolChangeQuota(PoolSize, Delta);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=133, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool ActionItemScheduledIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.ActionItemScheduledIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: IO Thread scheduler callback invoked.
        /// Event description ID=133, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="eventTraceActivity">The event trace activity</param>
        internal static void ActionItemScheduled(EtwDiagnosticTrace trace, System.Runtime.Diagnostics.EventTraceActivity eventTraceActivity)
        {
            WcfEventSource.Instance.ActionItemScheduled();
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=134, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool ActionItemCallbackInvokedIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.ActionItemCallbackInvokedIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: IO Thread scheduler callback invoked.
        /// Event description ID=134, Level=verbose, Channel=Debug
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="eventTraceActivity">The event trace activity</param>
        internal static void ActionItemCallbackInvoked(EtwDiagnosticTrace trace, System.Runtime.Diagnostics.EventTraceActivity eventTraceActivity)
        {
            WcfEventSource.Instance.ActionItemCallbackInvoked();
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57408, Level=critical, Channel=Operational
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool EtwUnhandledExceptionIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.EtwUnhandledExceptionIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Unhandled exception. Exception details: {0}
        /// Event description ID=57408, Level=critical, Channel=Operational
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Unhandled exception. Exception details: {0}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void EtwUnhandledException(EtwDiagnosticTrace trace, string param0, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.EtwUnhandledException(param0, serializedException);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57410, Level=warning, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool ThrowingEtwExceptionIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.ThrowingEtwExceptionIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Throwing an exception. Source: {0}. Exception details: {1}
        /// Event description ID=57410, Level=warning, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Throwing an exception. Source: {0}. Exception details: {1}</param>
        /// <param name="param1">Parameter 1 for event: Throwing an exception. Source: {0}. Exception details: {1}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void ThrowingEtwException(EtwDiagnosticTrace trace, string param0, string param1, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.ThrowingEtwException(param0, param1, serializedException);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57409, Level=verbose, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool ThrowingEtwExceptionVerboseIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.ThrowingEtwExceptionVerboseIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Throwing an exception. Source: {0}. Exception details: {1}
        /// Event description ID=57409, Level=verbose, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Throwing an exception. Source: {0}. Exception details: {1}</param>
        /// <param name="param1">Parameter 1 for event: Throwing an exception. Source: {0}. Exception details: {1}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void ThrowingEtwExceptionVerbose(EtwDiagnosticTrace trace, string param0, string param1, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.ThrowingEtwExceptionVerbose(param0, param1, serializedException);
        }

        /// <summary>
        /// Check if trace definition is enabled
        /// Event description ID=57407, Level=verbose, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        internal static bool ThrowingExceptionVerboseIsEnabled(EtwDiagnosticTrace trace)
        {
            return WcfEventSource.Instance.ThrowingExceptionVerboseIsEnabled();
        }

        /// <summary>
        /// Gets trace definition like: Throwing an exception. Source: {0}. Exception details: {1}
        /// Event description ID=57407, Level=verbose, Channel=Analytic
        /// </summary>
        /// <param name="trace">The trace provider</param>
        /// <param name="param0">Parameter 0 for event: Throwing an exception. Source: {0}. Exception details: {1}</param>
        /// <param name="param1">Parameter 1 for event: Throwing an exception. Source: {0}. Exception details: {1}</param>
        /// <param name="exception">Exception associated with the event</param>
        internal static void ThrowingExceptionVerbose(EtwDiagnosticTrace trace, string param0, string param1, System.Exception exception)
        {
            string serializedException = EtwDiagnosticTrace.ExceptionToTraceString(exception, MaxExceptionStringLength);
            WcfEventSource.Instance.ThrowingExceptionVerbose(param0, param1, serializedException);
        }
    }
}

