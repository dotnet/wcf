<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <AssemblyVersion>$(WcfAssemblyVersion)</AssemblyVersion>
    <StrongNameKeyId>Microsoft</StrongNameKeyId>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <CLSCompliant>true</CLSCompliant>
    <IsPackable>true</IsPackable>
    <!-- Workaround for https://github.com/NuGet/NuGet.Client/pull/3016 -->
    <NoWarn>$(NoWarn);NU5131</NoWarn>
    <TargetFrameworks>$(DotNetVersion);$(NetFrameworkVersion);netstandard2.0</TargetFrameworks>
    <LangVersion>latest</LangVersion>
    <IsShipping>$(Ship_WcfPackages)</IsShipping>
    <!-- The implementation assembly for Primitives doesn't yet match the reference assembly
         Generating the reference assembly would generate api's we don't want. For now the
         Primitives.Ref project has disabled EnableDefaultCompileItems so if it was generated,
         we wouldn't compile it anyway. -->
    <GenAPIGenerateReferenceAssemblySource>false</GenAPIGenerateReferenceAssemblySource>
    <IncludeSRCommonCode>false</IncludeSRCommonCode>
  </PropertyGroup>
  <ItemGroup Condition="'$(TargetFramework)' == '$(DotNetVersion)'">
    <InternalsVisibleTo Include="System.ServiceModel.Http" />
    <InternalsVisibleTo Include="System.ServiceModel.Federation" />
    <InternalsVisibleTo Include="System.ServiceModel.NetFramingBase" />
    <InternalsVisibleTo Include="System.ServiceModel.NetTcp" />
    <InternalsVisibleTo Include="System.ServiceModel.UnixDomainSocket" />
    <InternalsVisibleTo Include="System.ServiceModel.NetNamedPipe" />
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == '$(DotNetVersion)'">
    <PackageReference Include="System.Security.Cryptography.Xml" Version="$(SystemSecurityCryptographyXmlPackageVersion)" />
    <PackageReference Include="Microsoft.Extensions.ObjectPool" Version="$(MicrosoftExtensionsObjectPoolPackageVersion)" />
  </ItemGroup>
  <!-- TODO: Move this version number to central package management -->
  <ItemGroup Condition="'$(TargetFramework)' == 'netstandard2.0'">
    <PackageReference Include="System.Security.Principal.Windows" Version="$(SystemSecurityPrincipalWindowsPackageVersion)" />
  </ItemGroup>
  <!--The default source produced by the Arcade SDK does not work with the checked-in source file SR.cs (class/namespace/filename)-->
  <ItemGroup Condition="'$(TargetFramework)' == '$(DotNetVersion)'">
    <EmbeddedResource Update="Resources\Strings.resx">
      <GenerateSource>true</GenerateSource>
      <ManifestResourceName>FxResources.$(AssemblyName).SR</ManifestResourceName>
      <GenerateResourcesCodeAsConstants>false</GenerateResourcesCodeAsConstants>
      <ClassName>System.SRP</ClassName>
    </EmbeddedResource>
  </ItemGroup>
  <!-- Add ProjectReference to Duplex and Security but don't reference the assemblies for compilation.
       The OutputItemType value adds the referenced projects compiled output assembly file path to be
       added to an ItemGroup of that name (RetiredPackagesAssemblies in this case). The
       AddRetiredPackageAssembliesToPackage target then adds the assemblies that we added to the
       RetiredPackagesAssemblies ItemGroup to this projects nuget package in the lib
       folder for the relevant tfm. This results in the Security and Duplex assemblies (which only type
       forward to this primitives assembly) being available at runtime for any application that was
       compiled against an earlier version of the WCF libraries.
  -->
  <ItemGroup>
    <ProjectReference Include="..\..\System.ServiceModel.Duplex\src\System.ServiceModel.Duplex.csproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <OutputItemType>RetiredPackagesAssemblies</OutputItemType>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\..\System.ServiceModel.Security\src\System.ServiceModel.Security.csproj">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <OutputItemType>RetiredPackagesAssemblies</OutputItemType>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup Condition="'$(TargetFramework)' == '$(DotNetVersion)'">
    <ProjectReference Include="..\..\System.ServiceModel.Shim\System.ServiceModel.Shim.csproj" PrivateAssets="all">
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <OutputItemType>RetiredPackagesAssemblies</OutputItemType>
    </ProjectReference>
  </ItemGroup>
  <PropertyGroup>
    <TargetsForTfmSpecificContentInPackage>$(TargetsForTfmSpecificBuildOutput);AddRetiredPackageAssembliesToPackage</TargetsForTfmSpecificContentInPackage>
  </PropertyGroup>
  <Target Name="AddRetiredPackageAssembliesToPackage" AfterTargets="AssignTargetPaths">
    <ItemGroup>
      <RetiredPackagesAssemblies Update="@(RetiredPackagesAssemblies)">
        <PdbFilePath>%(RetiredPackagesAssemblies.RootDir)%(RetiredPackagesAssemblies.Directory)%(RetiredPackagesAssemblies.Filename).pdb</PdbFilePath>  
      </RetiredPackagesAssemblies>
    </ItemGroup>
    <ItemGroup>
      <TfmSpecificPackageFile Include="@(RetiredPackagesAssemblies)" PackagePath="lib/$(TargetFramework)" />
      <TfmSpecificPackageFile Include="%(RetiredPackagesAssemblies.PdbFilePath)" PackagePath="lib/$(TargetFramework)" Condition="Exists('%(RetiredPackagesAssemblies.PdbFilePath)')" />
    </ItemGroup>
  </Target>
</Project>