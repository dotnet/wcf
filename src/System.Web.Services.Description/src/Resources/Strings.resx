<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MissingMessagePartForMessageFromNamespace3" xml:space="preserve">
    <value>Missing message part '{0}' for message '{1}' from namespace '{2}'.</value>
  </data>
  <data name="OnlyOperationInputOrOperationOutputTypes" xml:space="preserve">
    <value>Only objects of type OperationInput or OperationOutput may be added.</value>
  </data>
  <data name="OnlyXmlElementsOrTypesDerivingFromServiceDescriptionFormatExtension0" xml:space="preserve">
    <value>Only XmlElements or types deriving from ServiceDescriptionFormatExtension may be added.</value>
  </data>
  <data name="TraceExceptionCaught" xml:space="preserve">
    <value>Exception caught in {0}.\r\n    {1}: {2}</value>
  </data>
  <data name="TraceExceptionDetails" xml:space="preserve">
    <value>Exception Details:\r\n{0}</value>
  </data>
  <data name="WebDescriptionMissing" xml:space="preserve">
    <value>Cannot find definition for {0}.  Service Description with namespace {1} is missing.</value>
  </data>
  <data name="WebDescriptionMissingItem" xml:space="preserve">
    <value>Element {0} named {1} from namespace {2} is missing.</value>
  </data>
  <data name="WebDescriptionTooManyMessages" xml:space="preserve">
    <value>No more than one input and one output message may be specified.</value>
  </data>
  <data name="WebUnknownElement" xml:space="preserve">
    <value>The element was not expected in this context: {0}.</value>
  </data>
  <data name="WebUnknownElement1" xml:space="preserve">
    <value>An unexpected element was encountered: {0}. No elements were expected in this scope.</value>
  </data>
  <data name="WebUnknownElement2" xml:space="preserve">
    <value>The element was not expected in this context: {0}. Expected elements: {1}.</value>
  </data>
  <data name="WsdlInstanceValidationDetails" xml:space="preserve">
    <value>Warning: {0} Line {1}, position {2}.</value>
  </data>
  <data name="WebDuplicateServiceDescription" xml:space="preserve">
    <value>More than one service description with targetNamespace '{0}' was specified.</value>
  </data>
  <data name="WebDuplicateFormatExtension" xml:space="preserve">
    <value>More than one format extension named '{0}' was specified. Each format extension must have a unique name.</value>
  </data>
  <data name="WebDuplicateOperationMessage" xml:space="preserve">
    <value>More than one operation message named '{0}' was specified. Each operation message must have a unique name.</value>
  </data>
  <data name="WebDuplicateImport" xml:space="preserve">
    <value>More than one import named '{0}' was specified. Each import must have a unique name.</value>
  </data>
  <data name="WebDuplicateMessage" xml:space="preserve">
    <value>More than one message named '{0}' was specified. Each message must have a unique name.</value>
  </data>
  <data name="WebDuplicatePort" xml:space="preserve">
    <value>More than one port named '{0}' was specified. Each port must have a unique name.</value>
  </data>
  <data name="WebDuplicatePortType" xml:space="preserve">
    <value>More than one port type named '{0}' was specified. Each port type must have a unique name.</value>
  </data>
  <data name="WebDuplicateBinding" xml:space="preserve">
    <value>More than one binding named '{0}' was specified. Each binding must have a unique name.</value>
  </data>
  <data name="WebDuplicateService" xml:space="preserve">
    <value>More than one service named '{0}' was specified. Each service must have a unique name.</value>
  </data>
  <data name="WebDuplicateMessagePart" xml:space="preserve">
    <value>More than one message part named '{0}' was specified. Each message part must have a unique name.</value>
  </data>
  <data name="WebDuplicateOperationBinding" xml:space="preserve">
    <value>More than one operation binding named '{0}' was specified. Each operation binding must have a unique name.</value>
  </data>
  <data name="WebDuplicateFaultBinding" xml:space="preserve">
    <value>More than one fault binding named '{0}' was specified. Each fault binding must have a unique name.</value>
  </data>
  <data name="WebDuplicateOperation" xml:space="preserve">
    <value>More than one operation named '{0}' was specified. Each operation must have a unique name.</value>
  </data>
  <data name="WebDuplicateOperationFault" xml:space="preserve">
    <value>More than one operation fault named '{0}' was specified. Each operation fault must have a unique name.</value>
  </data>
  <data name="WebDuplicateUnknownElement" xml:space="preserve">
    <value>More than one {0} named '{1}' was specified. Each {0} must have a unique name.</value>
  </data>
  <data name="RequiredXmlFormatExtensionAttributeIsMissing1" xml:space="preserve">
    <value>Required XmlFormatExtension attribute is missing on class {0}.</value>
  </data>
  <data name="TheSyntaxOfTypeMayNotBeExtended1" xml:space="preserve">
    <value>The syntax of type {0} may not be extended.</value>
  </data>
  <data name="WebNegativeValue" xml:space="preserve">
    <value>The value for '{0}' cannot be negative.</value>
  </data>
</root>