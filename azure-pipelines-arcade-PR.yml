# trigger ci builds for merged PRs into listed branches
# Setting batch to true, triggers one build at a time.
# if there is a push while a build in progress, it will wait,
# until the running build finishes, and produce a build with all the changes
trigger:
  batch: true
  branches:
    include:
    - main
    - release/3.*
    - release/4.*
    - release/6.*

# trigger ci builds for pull requests into listed branches
pr:
  branches:
    include:
    - main
    - release/3.*
    - release/4.*
    - release/6.*

variables:  
  - name: _TeamName
    value: WcfCore
  - name: _PublishUsingPipelines
    value: true
  - name: _DotNetArtifactsCategory
    value: .NETCore
  - name: _RunAsPublic
    value: true
  - name: _RunAsInternal
    value: false
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - name: _RunAsPublic
      value: false
    - name: _RunAsInternal
      value: true
    - group: DotNet-Wcf-SDLValidation-Params

resources:
  containers:
  - container: ubuntu_2004_20211215
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-coredeps

stages:
- stage: Build
  displayName: Build
  jobs:
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
    - template: /eng/common/templates/job/onelocbuild.yml
      parameters:
        MirrorRepo: wcf
        LclSource: lclFilesfromPackage
        LclPackageId: 'LCL-JUNO-PROD-WCF'
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enableMicrobuild: true
      enablePublishBuildArtifacts: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: $(_PublishUsingPipelines)
      enableTelemetry: true
      helixRepo: dotnet/wcf
      jobs:
      - job: Windows
        timeoutInMinutes: 90
        pool:
          ${{ if eq(variables._RunAsPublic, True) }}:
            name: NetCore-Public
            demands: ImageOverride -equals windows.vs2022.amd64.open
        variables:
        - _InternalBuildArgs: ''
        - HelixApiAccessToken: ''
        - _TestArgs: /p:ServiceUri=$(_serviceUri) /p:Root_Certificate_Installed=true /p:Client_Certificate_Installed=true /p:SSL_Available=true

        # Public/PR & CI Build Variables
        # For PR and CI test runs we use a different server machine that host multiple services to avoid concurrency issues.
        - _serviceUri:
        # For PR and CI test runs we need to update the Service being used by Scenario tests.
        # Used in UpdatePRService.yml
        # I think this can be removed based on the logic, setting it to true for now.
        - _updateService: false

        # Send to Helix variables
        - _xUnitWorkItemTimeout: '00:10:00'

        strategy:
          matrix:
            Release:
              _BuildConfig: Release
              # PRs or external builds are not signed.
              ${{ if eq(variables._RunAsPublic, True) }}:
                _SignType: test
                _DotNetPublishToBlobFeed : false
                _WcfPRServiceId: 1
            ${{ if eq(variables._RunAsPublic, True) }}:
              Debug:
                _BuildConfig: Debug
                _SignType: test
                _DotNetPublishToBlobFeed : false
                _WcfPRServiceId: 2

        steps:
        - checkout: self
          clean: true
        - powershell: |
            Write-Host "##vso[task.setvariable variable=_updateService]true"
            Write-Host "##vso[task.setvariable variable=_serviceUri]wcfcoresrv23.westus3.cloudapp.azure.com/WcfService$(_WcfPRServiceId)"

          displayName: Update _updateService variable
          condition: and(eq(variables._RunAsPublic, True), ne(variables._RunWithCoreWcfService, True))

        - ${{ if eq(variables._RunAsPublic, True) }}:
          - template: /eng/UpdatePRService.yml
            parameters:
              wcfPRServiceId: $(_WcfPRServiceId)
        - script: eng\common\cibuild.cmd
            -configuration $(_BuildConfig)
            -preparemachine
            $(_InternalBuildArgs)
            $(_TestArgs)
            /p:Test=false
          displayName: Windows Build / Publish

        - powershell: eng\common\build.ps1
            -configuration $(_BuildConfig)
            -preparemachine
            -ci
            -test
            -integrationTest
            -projects $(Build.SourcesDirectory)/eng/SendToHelix.proj
            $(_TestArgs)
            /p:TestJob=Windows
            /p:RunWithCoreWcfService=$($Env:_RunWithCoreWcfService)
            /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/SendToHelix.binlog
          displayName: Windows - Run Helix Tests
          env:
            SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            HelixAccessToken: $(HelixApiAccessToken)
            XUnitWorkItemTimeout: $(_xUnitWorkItemTimeout)
            RunAsPublic: $(_RunAsPublic)
            RunAsInternal: $(_RunAsInternal)
            IsWindowsBuild: true

      # Only build and test Linux in PR and CI builds.
      - ${{ if eq(variables._RunAsPublic, True) }}:
        - job: Linux
          timeoutInMinutes: 90
          container: ubuntu_2004_20211215
          pool:
            name:  NetCore-Public
            demands: ImageOverride -equals build.Ubuntu.1804.Amd64.Open
          variables:
          - _TestArgs: /p:ServiceUri=$(_serviceUri) /p:Root_Certificate_Installed=true /p:Client_Certificate_Installed=true /p:SSL_Available=true
          - _serviceUri:
          - _updateService: false

          # Send to Helix variables
          - _xUnitWorkItemTimeout: '00:10:00'

          strategy:
            matrix:
              Release:
                _BuildConfig: Release
                _SignType: none
                _DotNetPublishToBlobFeed : false
                _WcfPRServiceId: 3
                _PublishType: none
              Debug:
                _BuildConfig: Debug
                _SignType: none
                _DotNetPublishToBlobFeed : false
                _WcfPRServiceId: 4
                _PublishType: none
          steps:
          - checkout: self
            clean: true
          - powershell: |
              Write-Host "##vso[task.setvariable variable=_updateService]true"
              Write-Host "##vso[task.setvariable variable=_serviceUri]wcfcoresrv23.westus3.cloudapp.azure.com/WcfService$(_WcfPRServiceId)"

            displayName: Update _updateService variable
            condition: and(eq(variables._RunAsPublic, True), ne(variables._RunWithCoreWcfService, True))

          - template: /eng/UpdatePRService.yml
            parameters:
              wcfPRServiceId: $(_WcfPRServiceId)
          - script: eng/common/cibuild.sh
              -configuration $(_BuildConfig)
              -preparemachine
              $(_TestArgs)
              /p:Test=false
            displayName: Unix Build
          - script: eng/common/build.sh
              --configuration $(_BuildConfig)
              --prepareMachine
              --ci
              --test
              --integrationTest
              --projects $(Build.SourcesDirectory)/eng/SendToHelix.proj
              $(_TestArgs)
              /p:TestJob=Linux
              /p:RunWithCoreWcfService=$($Env:_RunWithCoreWcfService)
              /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/SendToHelix.binlog
            displayName: Linux - Run Helix Tests
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              ServiceHost: $(_serviceUri)
              RunAsPublic: $(_RunAsPublic)
              RunAsInternal: $(_RunAsInternal)
              IsWindowsBuild: false

      # Only build and test MacOS in PR and CI builds.
      - ${{ if eq(variables._RunAsPublic, True) }}:
        - job: MacOS
          timeoutInMinutes: 90
          pool:
            name: NetCore-Public
            demands: ImageOverride -equals windows.vs2022.amd64.open
          variables:
          - _TestArgs: /p:ServiceUri=$(_serviceUri) /p:Root_Certificate_Installed=true /p:Client_Certificate_Installed=true /p:SSL_Available=true
          - _serviceUri:
          - _updateService: false

          # Send to Helix variables
          - _xUnitWorkItemTimeout: '00:10:00'

          strategy:
            matrix:
              Release:
                _BuildConfig: Release
                _SignType: none
                _DotNetPublishToBlobFeed : false
                _WcfPRServiceId: 5
                _PublishType: none
              Debug:
                _BuildConfig: Debug
                _SignType: none
                _DotNetPublishToBlobFeed : false
                _WcfPRServiceId: 6
                _PublishType: none
          steps:
          - checkout: self
            clean: true
          - powershell: |
              Write-Host "##vso[task.setvariable variable=_updateService]true"
              Write-Host "##vso[task.setvariable variable=_serviceUri]wcfcoresrv23.westus3.cloudapp.azure.com/WcfService$(_WcfPRServiceId)"

            displayName: Update _updateService variable
            condition: and(eq(variables._RunAsPublic, True), ne(variables._RunWithCoreWcfService, True))

          - template: /eng/UpdatePRService.yml
            parameters:
              wcfPRServiceId: $(_WcfPRServiceId)
          - script: eng\common\cibuild.cmd
              -configuration $(_BuildConfig)
              -preparemachine
              $(_TestArgs)
              /p:Test=false
            displayName: MacOS Build
          - powershell: eng\common\build.ps1
              -configuration $(_BuildConfig)
              -prepareMachine
              -ci
              -test
              -integrationTest
              -projects $(Build.SourcesDirectory)/eng/SendToHelix.proj
              $(_TestArgs)
              /p:TestJob=MacOS
              /p:RunWithCoreWcfService=$($Env:_RunWithCoreWcfService)
              /bl:$(Build.SourcesDirectory)/artifacts/log/$(_BuildConfig)/SendToHelix.binlog
            displayName: MacOS - Run Helix Tests
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
              ServiceHost: $(_serviceUri)
              RunAsPublic: $(_RunAsPublic)
              RunAsInternal: $(_RunAsInternal)
              IsWindowsBuild: false
